//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Rect.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2020 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Point.h"
#include <array>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TRect<T>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
class TRect
{
// ELEMENT DATA
private:
	std::array<TPoint<T>, 2> pa;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TRect() : pa() {}
	TRect(const TPoint<T>& p1, const TPoint<T>& p2) : pa{p1, p2} {}

// ELEMENT FUNCTIONS
public:
	TPoint<T>& operator[](const int i) {return pa[i];}
	const TPoint<T>& operator[](const int i) const {return pa[i];}
	TRect<T>& normalize();
	TRect<T>& expand(const TPoint<T>&);
	TRect<T>& reduce(const TPoint<T>&);
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TRect<T> - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TRect<T>& TRect<T>::normalize()
{
	if (pa[0].x > pa[1].x) std::swap(pa[0].x, pa[1].x);
	if (pa[0].y > pa[1].y) std::swap(pa[0].y, pa[1].y);
	return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TRect<T>& TRect<T>::expand(const TPoint<T>& p)
{
	pa[0] -= p;
	pa[1] += p;
	return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TRect<T>& TRect<T>::reduce(const TPoint<T>& p)
{
	pa[0] += p;
	pa[1] -= p;
	return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
