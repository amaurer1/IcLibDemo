//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Point.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2020 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <math.h>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TPoint<T>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
class TPoint
{
// ELEMENT DATA
public:
	T x, y;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TPoint(const T v = T(0)) : x(v), y(v) {}
	TPoint(const T vx, const T vy) : x(vx), y(vy) {}

// ELEMENT FUNCTIONS
public:
	TPoint& operator+() {return *this;}
	TPoint& operator-() {x = -x, y = -y; return *this;}
	TPoint& operator+=(const TPoint<T>& p) {x += p.x, y += p.y; return *this;}
	TPoint& operator-=(const TPoint<T>& p) {x -= p.x, y -= p.y; return *this;}
	TPoint& operator*=(const TPoint<T>& p) {x *= p.x, y *= p.y; return *this;}
	TPoint& operator/=(const TPoint<T>& p) {x /= p.x, y /= p.y; return *this;}
	TPoint& operator=(const T v) {x = v, y = v; return *this;}
	TPoint& operator+=(const T v) {x += v, y += v; return *this;}
	TPoint& operator-=(const T v) {x -= v, y -= v; return *this;}
	TPoint& operator*=(const T v) {x *= v, y *= v; return *this;}
	TPoint& operator/=(const T v) {x /= v, y /= v; return *this;}
	TPoint& move(const TPoint<T>&);
	TPoint& scale(const TPoint<T>&);
	TPoint& scale(const TPoint<T>&, const TPoint<T>&);
	TPoint& turn(const T);
	TPoint& turn(const T, const TPoint<T>&);
	TPoint& shear(const TPoint<T>&);
	TPoint& shear(const TPoint<T>&, const TPoint<T>&);
	T calcLength() const;
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TPoint<T> - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::move(const TPoint<T>& p)
{
	return operator+=(p);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::scale(const TPoint<T>& p)
{
	return operator*=(p);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::scale(const TPoint<T>& p, const TPoint<T>& pp)
{
	return operator-=(pp).scale(p).operator+=(pp);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::turn(const T a)
{
	const T tx = x;
	const T ca = cos(a);
	const T sa = sin(a);
	x = tx * ca - y * sa;
	y = tx * sa + y * ca;
	return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::turn(const T a, const TPoint<T>& pp)
{
	return operator-=(pp).turn(a).operator+=(pp);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::shear(const TPoint<T>& p)
{
	const T tx = x;
	x += y * p.x;
	y += tx * p.y;
	return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T>& TPoint<T>::shear(const TPoint<T>& p, const TPoint<T>& pp)
{
	return operator-=(pp).shear(p).operator+=(pp);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline T TPoint<T>::calcLength() const
{
	return sqrt(x * x + y * y);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TPoint<T> - GOBAL FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator+(TPoint<T> p1, const TPoint<T>& p2)
{
	return p1 += p2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator-(TPoint<T> p1, const TPoint<T>& p2)
{
	return p1 -= p2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator*(TPoint<T> p1, const TPoint<T>& p2)
{
	return p1 *= p2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator/(TPoint<T> p1, const TPoint<T>& p2)
{
	return p1 /= p2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator+(TPoint<T> p, const T v)
{
	return p += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator+(const T v, TPoint<T> p)
{
	return p += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator-(TPoint<T> p, const T v)
{
	return p -= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator-(const T v, const TPoint<T>& p)
{
	return TPoint<T>(v - p.x, v - p.y);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator*(TPoint<T> p, const T v)
{
	return p *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator*(const T v, TPoint<T> p)
{
	return p *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator/(TPoint<T> p, const T v)
{
	return p /= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TPoint<T> operator/(const T v, const TPoint<T>& p)
{
	return TPoint<T>(v / p.x, v / p.y);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
